#-------------------------------------------------------------------------
# AUTHOR: Carlo Golfo
# FILENAME: svm.py 
# SPECIFICATION: description of the program
# FOR: CS 4210- Assignment #3
# TIME SPENT: how long it took you to complete the assignment
#-----------------------------------------------------------*/

# Import necessary libraries
from sklearn import svm
import numpy as np
import pandas as pd

# Defining the hyperparameter values
c_values = [1, 5, 10, 100]
degree_values = [1, 2, 3]
kernel_types = ["linear", "poly", "rbf"]
decision_function_shapes = ["ovo", "ovr"]

# Read the training data using Pandas
df = pd.read_csv('optdigits.tra', sep=',', header=None)
X_training = np.array(df.values)[:, :64]  # Extracting the first 64 fields for feature training data
y_training = np.array(df.values)[:, -1]  # Extracting the last field for class training data

# Read the test data using Pandas
df = pd.read_csv('optdigits.tes', sep=',', header=None)
X_test = np.array(df.values)[:, :64]  # Extracting the first 64 fields for feature testing data
y_test = np.array(df.values)[:, -1]  # Extracting the last field for class testing data

# Initialize variables to keep track of the best accuracy and corresponding hyperparameters
best_accuracy = 0
best_params = {}

# Nested loops to iterate through hyperparameter combinations
for c in c_values:
    for degree in degree_values:
        for kernel in kernel_types:
            for decision_function_shape in decision_function_shapes:
                # Create an SVM classifier with the current hyperparameters
                clf = svm.SVC(C=c, degree=degree, kernel=kernel, decision_function_shape=decision_function_shape)

                # Fit the SVM to the training data
                clf.fit(X_training, y_training)

                # Initialize variables to compute accuracy
                correct_predictions = 0
                total_samples = len(y_test)

                # Make predictions for each test sample and compute accuracy
                for x_testSample, y_testSample in zip(X_test, y_test):
                    prediction = clf.predict([x_testSample])
                    if prediction == y_testSample:
                        correct_predictions += 1

                accuracy = correct_predictions / total_samples

                # Check if the calculated accuracy is higher than the previous best accuracy
                if accuracy > best_accuracy:
                    best_accuracy = accuracy
                    best_params = {
                        "C": c,
                        "degree": degree,
                        "kernel": kernel,
                        "decision_function_shape": decision_function_shape
                    }

                print(f"Highest SVM accuracy so far: {best_accuracy:.2f}, Parameters: C={best_params['C']}, degree={best_params['degree']}, kernel={best_params['kernel']}, decision_function_shape='{best_params['decision_function_shape']}'")
